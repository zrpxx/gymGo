# Generated by Django 4.0 on 2021-12-30 10:15

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
from django.utils.timezone import utc


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('type', models.IntegerField(choices=[(1, '超级管理员'), (2, '教练'), (3, '维修员')], default=1, verbose_name='用户类型')),
                ('nick_name', models.CharField(default='未填写', max_length=20, verbose_name='昵称')),
                ('work_type', models.CharField(default='未填写', max_length=20, verbose_name='职位')),
                ('salary', models.IntegerField(default=0, verbose_name='工资')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '用户管理',
                'verbose_name_plural': '用户管理',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Agendas',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='日程ID')),
                ('schedule_time', models.TimeField(verbose_name='日程时间')),
                ('day', models.IntegerField(choices=[(1, '星期一'), (2, '星期二'), (3, '星期三'), (4, '星期四'), (5, '星期五'), (6, '星期六'), (7, '星期日')], verbose_name='日期')),
                ('status', models.IntegerField(choices=[(1, '可用'), (2, '被预约')], default=1, verbose_name='日程状态')),
                ('coach', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.user', verbose_name='教练')),
            ],
            options={
                'verbose_name': '日程管理',
                'verbose_name_plural': '日程管理',
                'db_table': 'agendas',
            },
        ),
        migrations.CreateModel(
            name='Attends',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='上课ID')),
                ('course_date_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='上课时间')),
                ('description', models.TextField(verbose_name='上课描述')),
            ],
            options={
                'verbose_name': '课程参加记录管理',
                'verbose_name_plural': '课程参加记录管理',
                'db_table': 'attends',
            },
        ),
        migrations.CreateModel(
            name='Customers',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='用户ID')),
                ('username', models.TextField(verbose_name='用户名')),
                ('password', models.TextField(verbose_name='密码')),
                ('name', models.TextField(verbose_name='姓名')),
                ('register_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='注册时间')),
                ('vip_level', models.IntegerField(verbose_name='VIP等级')),
                ('total_charge', models.FloatField(verbose_name='总充值金额')),
                ('balance', models.FloatField(verbose_name='余额')),
            ],
            options={
                'verbose_name': '顾客信息管理',
                'verbose_name_plural': '顾客信息管理',
                'db_table': 'customers',
            },
        ),
        migrations.CreateModel(
            name='Equipment',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='设备ID')),
                ('name', models.TextField(verbose_name='设备名称')),
                ('image', models.TextField(verbose_name='设备图片')),
                ('status', models.IntegerField(choices=[(1, '可用'), (2, '被预约'), (3, '正在使用'), (4, '故障')], verbose_name='设备状态')),
            ],
            options={
                'verbose_name': '设备管理',
                'verbose_name_plural': '设备管理',
                'db_table': 'equipment',
            },
        ),
        migrations.CreateModel(
            name='Zones',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='区域ID')),
                ('name', models.TextField(verbose_name='区域名')),
                ('zone_description', models.TextField(verbose_name='区域介绍')),
                ('current_number', models.IntegerField(verbose_name='现有人数')),
                ('max_number', models.IntegerField(verbose_name='区域最多接纳人数')),
                ('start_time', models.TimeField(verbose_name='开放开始时间')),
                ('end_time', models.TimeField(verbose_name='开放截止时间')),
            ],
            options={
                'verbose_name': '区域管理',
                'verbose_name_plural': '区域管理',
                'db_table': 'zones',
            },
        ),
        migrations.CreateModel(
            name='Reviews',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='评论ID')),
                ('rating', models.IntegerField(choices=[(1, '一星'), (2, '两星'), (3, '三星'), (4, '四星'), (5, '五星')], verbose_name='评分')),
                ('review_text', models.TextField(verbose_name='评论内容')),
                ('attend_course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.attends', verbose_name='课程记录')),
            ],
            options={
                'verbose_name': '评论管理',
                'verbose_name_plural': '评论管理',
                'db_table': 'reviews',
            },
        ),
        migrations.CreateModel(
            name='ReserveEquipment',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='预约ID')),
                ('due_time', models.DateTimeField(default=datetime.datetime(2021, 12, 30, 11, 15, 47, 818724, tzinfo=utc), verbose_name='过期时间')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.customers', verbose_name='预约顾客')),
                ('equipment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.equipment', verbose_name='被预约设备')),
            ],
            options={
                'verbose_name': '设备预约',
                'verbose_name_plural': '设备预约',
                'db_table': 'reserve_equipment',
            },
        ),
        migrations.CreateModel(
            name='ReserveAgenda',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='预约ID')),
                ('agenda', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.agendas', verbose_name='被预约教练时间段')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.customers', verbose_name='顾客')),
            ],
            options={
                'verbose_name': '教练日程预约',
                'verbose_name_plural': '教练日程预约',
                'db_table': 'reserve_agenda',
            },
        ),
        migrations.CreateModel(
            name='Lockers',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='柜子ID')),
                ('status', models.IntegerField(verbose_name='柜子状态')),
                ('occupied_since', models.DateTimeField(verbose_name='占用时间')),
                ('occupied_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.customers', verbose_name='占用者')),
            ],
            options={
                'verbose_name': '柜子管理',
                'verbose_name_plural': '柜子管理',
                'db_table': 'lockers',
            },
        ),
        migrations.AddField(
            model_name='equipment',
            name='position',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.zones', verbose_name='设备位置'),
        ),
        migrations.AddField(
            model_name='customers',
            name='current_zone',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.zones', verbose_name='所在区域'),
        ),
        migrations.CreateModel(
            name='Curriculums',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='课程ID')),
                ('name', models.TextField(verbose_name='课程名')),
                ('type', models.TextField(verbose_name='课程类型')),
                ('price', models.IntegerField(verbose_name='课程价格')),
                ('description', models.TextField(verbose_name='课程介绍')),
                ('coach', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.user', verbose_name='教练')),
            ],
            options={
                'verbose_name': '课程管理',
                'verbose_name_plural': '课程管理',
                'db_table': 'curriculums',
            },
        ),
        migrations.CreateModel(
            name='CheckLogs',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='维护ID')),
                ('maintenance_time', models.DateTimeField(verbose_name='维护时间')),
                ('description', models.TextField(default='正常', verbose_name='维护描述')),
                ('equipment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.equipment', verbose_name='被检查设备')),
                ('maintainer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.user', verbose_name='修理员')),
            ],
            options={
                'verbose_name': '维护日志',
                'verbose_name_plural': '维护日志',
                'db_table': 'check_logs',
            },
        ),
        migrations.CreateModel(
            name='Buys',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='购买ID')),
                ('course_left', models.IntegerField(verbose_name='剩余课时')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.curriculums', verbose_name='课程')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.customers', verbose_name='顾客')),
            ],
            options={
                'verbose_name': '课余量管理',
                'verbose_name_plural': '课余量管理',
                'db_table': 'buys',
            },
        ),
        migrations.CreateModel(
            name='BodyData',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='数据ID')),
                ('measure_date', models.DateTimeField(verbose_name='测量时间')),
                ('weight', models.FloatField(verbose_name='体重')),
                ('height', models.FloatField(verbose_name='身高')),
                ('fat', models.FloatField(verbose_name='体脂')),
                ('muscle', models.FloatField(verbose_name='肌肉')),
                ('bmi', models.FloatField(verbose_name='BMI')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.customers', verbose_name='顾客')),
            ],
            options={
                'verbose_name': '身体数据',
                'verbose_name_plural': '身体数据',
                'db_table': 'body_data',
            },
        ),
        migrations.CreateModel(
            name='Bills',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='账单ID')),
                ('amount', models.FloatField(verbose_name='金额')),
                ('type', models.IntegerField(choices=[(1, '存入'), (2, '使用')], verbose_name='类型')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.customers', verbose_name='顾客')),
            ],
            options={
                'verbose_name': '账单管理',
                'verbose_name_plural': '账单管理',
                'db_table': 'bills',
            },
        ),
        migrations.AddField(
            model_name='attends',
            name='course',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.curriculums', verbose_name='课程'),
        ),
        migrations.AddField(
            model_name='attends',
            name='customer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.customers', verbose_name='顾客'),
        ),
        migrations.CreateModel(
            name='ArchiveBodyData',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='数据ID')),
                ('measure_date', models.DateTimeField(verbose_name='测量时间')),
                ('weight', models.FloatField(verbose_name='体重')),
                ('height', models.FloatField(verbose_name='身高')),
                ('fat', models.FloatField(verbose_name='体脂')),
                ('muscle', models.FloatField(verbose_name='肌肉')),
                ('bmi', models.FloatField(verbose_name='BMI')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.customers', verbose_name='顾客')),
            ],
            options={
                'verbose_name': '身体数据（存档）',
                'verbose_name_plural': '身体数据（存档）',
                'db_table': 'archive_body_data',
            },
        ),
    ]
